import axios from 'axios';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Link from 'next/link';
import { Button, FormControl, FormLabel, Input } from '@chakra-ui/react';
import { Container, ImageContainer, LoginContainer, ButtonContainer } from '../../styles/pages/login/style';

export default function User() {
    const router = useRouter();
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState<string | null>(null);
    const [loading, setLoading] = useState(false);

    useEffect(() => {
        const token = localStorage.getItem('accessToken');
        if (token) {
            const expiration = localStorage.getItem('expiration');
            if (expiration && new Date(expiration) > new Date()) {
                // Token válido, redirecionar para outra página protegida
                router.push('/');
            } else {
                // Token expirado, limpar local storage e redirecionar para tela de login
                localStorage.removeItem('accessToken');
                localStorage.removeItem('expiration');
                router.push('/login');
            }
        }
    }, []);

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        setLoading(true); // Define o estado de loading como true
        try {
            const response = await axios.post('https://unicap-events-back-end.vercel.app/auth/login', {
                email: email,
                password: password
            });

            const token = response.data.data.token;
            const permission = response.data.data.permission;
            console.log(permission)
            const expiration = new Date(new Date().getTime() + 24 * 60 * 60 * 1000); // Expira em um dia
            // Armazenar o token e a data de expiração no local storage
            localStorage.setItem('accessToken', token);
            localStorage.setItem('permission', permission);
            localStorage.setItem('expiration', expiration.toISOString()); // Convertendo para string

            // Redirecionar para outra página protegida após o login
            router.push('/');
        } catch (error) {
            setError('Erro ao fazer login. Verifique suas credenciais.');

        } finally {
            setLoading(false); // Define o estado de loading como false após o login ou erro
        }
    };

    return (
        <>
            <Head>
                <title>Humanitas</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Container>
                <LoginContainer>
                    <ImageContainer>
                        <img src="/humanitas.jfif" alt="Your Image" />
                    </ImageContainer>
                    <form onSubmit={handleSubmit}>
                        <FormControl>
                            <FormLabel>Email</FormLabel>
                            <Input type='email' value={email} onChange={(e) => setEmail(e.target.value)} />

                            <FormLabel>Senha</FormLabel>
                            <Input type='password' value={password} onChange={(e) => setPassword(e.target.value)} />

                            {error && <p>{error}</p>}

                            <ButtonContainer>
                                <Button
                                    mt={4}
                                    bg="#6A0014"
                                    color="white"
                                    type='submit'
                                    _hover={{ bg: 'red.500' }}
                                    isLoading={loading}
                                >
                                    Entrar
                                </Button>
                            </ButtonContainer>
                        </FormControl>
                    </form>
                    <Link href="/register">
                        <p style={{ marginTop: '10px', display: 'block', textAlign: 'center', color: '#6A0014' }}>
                            Não tem uma conta? Cadastre-se
                        </p>
                    </Link>
                </LoginContainer>
            </Container>
        </>
    );
}
